import { Span, Tracer, Meter, MetricOptions } from '@opentelemetry/api';
import { TelemetryConfig, ObservabilityInstance } from './types';
import { PIISanitizer } from './sanitizer';
export declare class TelemetryManager implements ObservabilityInstance {
    private sdk;
    private config;
    tracer: Tracer;
    meter: Meter;
    piiSanitizer: PIISanitizer | undefined;
    private sessionId;
    private sessionStart;
    private isInitialized;
    constructor(config: TelemetryConfig);
    private getOTLPHeaders;
    private createTraceExporter;
    private createMetricReader;
    startActiveSpan(name: string, attributes: Record<string, any>, fn: (span: Span) => void): ReturnType<typeof this.tracer.startActiveSpan>;
    createSpan(name: string, attributes: Record<string, any>): Span;
    getHistogram(name: string, options: MetricOptions): (value: number, attributes?: Record<string, any>) => void;
    getIncrementCounter(name: string, options: MetricOptions): (value: number, attributes?: Record<string, any>) => void;
    getArgumentAttributes(params: any, prefix?: string): Record<string, any>;
    private recordSessionDuration;
    private processTelemetryAttributesWithSessionId;
    processTelemetryAttributes(data: Record<string, any>): Record<string, any>;
    shutdown(): Promise<void>;
}
//# sourceMappingURL=telemetry.d.ts.map